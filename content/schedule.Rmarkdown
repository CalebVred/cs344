---
title: "Schedule"
---

```{r setup, include=FALSE}
library(tidyverse)
library(glue)
library(lubridate)
knitr::opts_chunk$set(echo = FALSE)
# devtools::install_github("kcarnold/daily")
library(daily)
```

Note: All activities in the future are tentative.

```{r echo=FALSE}
activity_dates <- Sys.glob(here::here('content/activities/*/*.markdown')) %>% 
  tibble(path = .) %>% 
  rowwise() %>% 
  mutate(yaml = list(rmarkdown::yaml_front_matter(path)), title = yaml$title, slug = yaml$slug, dates = list(yaml$dates)) %>% 
  filter(!is.null(dates)) %>% 
  unnest_longer(dates, values_to = "date", indices_to = "kind") %>% 
  select(slug, title, kind, date) %>%
  filter(date > "2022-01-01")

activity_cal_data <- activity_dates %>% transmute(
  date = lubridate::ymd(date),
  label = str_to_title(kind),
  contents = str_glue("[{title}](/activities/{slug})")
)

# library(fs)
# dir_ls(here::here("content/units"), recurse = TRUE, glob = "*.md") %>% map_dfr(~ rmarkdown::yaml_front_matter(.), .id = 'file') %>% select(file, title, date) %>% extract(file, into = "url", regex = "content/(.+).md")
```

```{r}
slide_cal_data <- 
Sys.glob(here::here('static/slides/*/*.Rmd')) %>% 
  tibble(path = .) %>% 
  rowwise() %>% 
  mutate(yaml = list(rmarkdown::yaml_front_matter(path)), title = yaml$title, date = yaml$date) %>% 
  mutate(path = str_extract(path, "(/slides/.+)$") %>% str_replace(".Rmd", ".html")) %>% 
  filter(date > "2022-01-01") %>% 
  transmute(
    date = lubridate::ymd(date),
    label = "Slides",
    contents = str_glue("[{title}]({path})")
  )
```

```{r echo=FALSE}
daily_file <- here::here("daily.txt") 
daily_meta <- rmarkdown::yaml_front_matter(daily_file)
```

```{r}
#' A version of purrr::accumulate that maintains the data type of the input.
#
# Needed because accumulate with dates coerces to `dbl`.

accumulate_custom <- function(x, f) {
  res <- x
  prev <- x[[1]]
  for(i in seq_along(x)) {
    if (i == 1) next;
    res[[i]] <- prev <- f(prev, x[[i]])
  }
  res
}

split_into_sections <- function(day_contents) {
  # If content starts with space or is only whitespace, it continues the previous
  # section. Otherwise, it's in the Private section.

  tibble(line = day_contents) %>% 
  filter(row_number() > 1) %>% 
  separate(line, into = c("section", "contents"), sep = "::(.?)", fill = "left") %>% 
  
  # starting with "  " continues sections.
  mutate(starts_with_whitespace = str_starts(contents, "  ")) %>% 
  
  # trim that starting "  ".
  mutate(contents = if_else(
    starts_with_whitespace, str_sub(contents, 3), contents)) %>% 
  
  # whitespace also means continue sections.
  mutate(should_continue_section =
    is.na(section) & 
      ((str_trim(contents) == "") | starts_with_whitespace)) %>% 
  group_by(section_idx = cumsum(!should_continue_section)) %>% 
  summarize(label = first(section), contents = paste(contents, collapse = '\n')) %>% 
  replace_na(list(label = "Private")) %>% 
  select(-section_idx)
}

mask <- daily:::days2mask("MWF")
daily_data <- here::here("daily.txt") %>% 
  read_lines() %>% 
  tibble(line = .) %>% 
  mutate(is_delim = str_starts(line, "==="), day_spec = cumsum(is_delim)) %>% 
  group_by(day_spec) %>% 
  summarize(daysep = first(line), rest = list(line)) %>% 
  filter(day_spec > 0) %>% 
  # remove `===` prefix
  mutate(daysep = str_sub(daysep, start = 4)) %>% 
  # mark skipped days (TODO handle)
  mutate(skip = str_detect(daysep, "skip")) %>% 
  # stop before end of calendar
  mutate(hit_end = cumsum(str_detect(daysep, "endofcal"))) %>% 
  filter(hit_end == 0) %>% 
  mutate(day = lubridate::mdy(daysep)) %>% 
  select(-daysep, -day_spec, -hit_end) %>% 
  # Fill in unspecified days
  mutate(day = accumulate_custom(day, function(prev_day, day) {
    if (is.na(day)) daily:::next_cal_day(prev_day, mask)
    else day
  })) %>% 
  rowwise() %>% 
  mutate(day_contents = list(split_into_sections(rest))) %>% 
  select(-rest) %>% 
  rename(date = day) %>% 
  unnest(day_contents) %>% 
  filter(str_trim(contents) != "") %>% 
  ungroup()

cal_data <- 
  daily_data %>% 
  filter(
    !(str_to_lower(label) %in% c("plan", "log", "reflection", "next time", "private")),
    !is.na(contents)) %>% 
  mutate(contents = str_trim(contents, side = "right")) %>% 
  mutate(contents = if_else(
    label %in% c("Quiz"),
    str_extract(contents, regex("^[^\\n]+$", multiline = TRUE)),
    contents
  )) %>% 
  bind_rows(activity_cal_data) %>% 
  bind_rows(slide_cal_data)

start <- lubridate::floor_date(min(cal_data$date), unit = "week")

cal_data %>% 
  filter(date <= lubridate::mdy(daily_meta$end)) %>% 
  mutate(topic_contents = glue("**{label}** {contents}")) %>% 
  group_by(date) %>% 
  summarize(contents = paste(topic_contents, collapse = "\n\n")) %>% 
  rowwise() %>% 
  mutate(html = markdown::markdownToHTML(text = contents, fragment.only = TRUE)) %>% 
  ungroup() %>% 
  select(date, html) %>% 
  complete(date = seq(start, max(date), "day"), fill = list(html = "")) %>% 
  mutate(week  = as.numeric(floor(difftime(date, start, units = "weeks")))) %>% 
  html_calendar(show = 2:6, past_week = daily_meta$past_week) %>% 
  knitr::asis_output()
```

<!-- Future topics (tentative): -->

```{r results='asis'}
cal_data %>% 
  filter(date > lubridate::mdy(daily_meta$end)) %>%
  filter(label == "Topic") %>% 
  transmute(entry = str_glue("* {wday(date, label=TRUE)} {month(date)}/{day(date)}: {str_trim(contents)}")) %>% 
  pull(entry) %>% 
  paste0(collapse = "\n") %>% cat()
```


```{r eval=FALSE}
summarize_week <- function(start) {
  start <- ymd(start)
  end <- start + days(6)
  cal_data %>% 
    filter(between(date,start, end)) %>%
    arrange(date) %>% 
    mutate(entry = str_glue("{label}: {str_trim(contents)}")) %>% 
    group_by(date) %>% 
    summarize(entry = str_glue("* {wday(first(date), label=TRUE)}: {paste0(entry, collapse='; ')}")) %>% 
    pull(entry) %>% 
    paste0(collapse = "\n")
}

summarize_week("2021-04-19") %>% clipr::write_clip()
```

<style>
.daily-calendar ul {
  padding-left: 1rem;
}

.daily-calendar details {
  margin-bottom: 0; // override a wowchemy style
}

.daily-calendar td {
    padding: 0;
}

.daily-calendar td > div {
  padding: 5px;
}
</style>
